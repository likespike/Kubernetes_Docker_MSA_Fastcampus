01. [개정판] Docker 빌드를 위한 Jenkins 활용 소개

https://brunch.co.kr/@topasvga/1534

json

https://github.com/DevOpsRunbook/FastCampus/tree/main/Appendix

다양한 라이브러리의 등장
라이브러리 다운로드 및 추가의 번거로움
개발자들 간의 버전관리 어려움
다운받은 jar 파일의 보안 위험

빌드 도구
계속해서 늘어나는 라이브러리를 자동 추가 및 관리
프로젝트를 진행하며 라이브러리의 버전을 쉽게 동기화

<Docker CI/CD>
Jenkins를 활용한 CI/CD 빌드 환경 구성
Continuous Integration
코드 또는 다른 기능과 함께 통합되는 소프트웨어의 개발 단계 주기
임시환경에서 코드 통합 및 빌드 및 기본 테스트 수행 포함
깃과 같은 소스 제어 서버에 커밋 -> CI 도구에서 가져와 시작



빌드 시 정적 도구 분석 수행 - 코드 버그 예방 및 문법, 스타일 확인
테스트 - 배포 전 기능 통합 및 성능 테스트
(어딘가에 패키지)
배포



----------------------------------------
Ch.2 Docker 빌드를 위한 Jenkins CI 활용
컴퓨터 소프트웨어 분야에서 소프트웨어 빌드(software build)는 소스 코드 파일을 컴퓨터나 휴대폰에서 실행할 수 있는 독립(standalone) 소프트웨어 아티팩트로 변환하는 과정을 말하거나 그에 대한 결과물을 일컫는다.
소프트웨어 빌드에 있어 가장 중요한 단계중 하나는 소스 코드 파일이 실행 코드로 변환되는 컴파일 과정이다.
컴퓨터 프로그램을 빌드하는 과정은 보통 다른 프로그램을 제어하는 프로그램인 빌드 도구에 의해 관리된다.

빌드 - 소스 코드를 컴파일, 테스트, 정적분석 등을 실행하여 실행 가능한 애플리케이션으로 만들어주는 과정

전체 빌드 / 증분 빌드

Docker 빌드
실제 컨테이너를 사용할 때는 하나의 파일 시스템처럼 보이는데, 모든 레이어들을 유니온 파일 시스템(Union File System)방식을 사용해 여러개로 나누어진 파일 시스템을 하나의 파일시스템으로 만운트함 

Dockerfile
FROM
RUN - Dockerfile로부터 도커 이미지를 빌드하는 순간에 실행되므로 주로 라이브버리를 설치하는 부분에서 주로 활용됨
CMD - 컨테이너 실행 중 사용이 가능한 명령어
LABEL
EXPOSE
ENV
ADD - 파일/디렉토리 경로 추가
COPY
ENTRYPOINT - 컨테이너를 실행 후 최초로 실행되는 명령어 (1회성 명령어)
VOLUME
USER
WORKDIR
ARG

docker build -t <생성할 이미지명> <빌드할 코드 경로>
docker build -t <생성할 이미지명> -f <dockerfile 파일명> <빌드할 코드 경로>
docker build -t test-docker .
(-t : title? - 생성할 이미지명?)

Docker 빌드를 위한 Jenkin 활용
Jenkins는 빌드 도구임
Commit - Git과 같은 VCS(Version Control System)
Build - 소프트웨어 코드와 라이브러리, 종속성을 가지고 컴파일 진행, 통합, 빌드 과정에서 단위 test함
TEST - 통합 test
Stage - 배포할 수 있는 상태로 준비
Deploy Dev/AQ...
Production

---------------
iam
사용자
설정 - 계정 - 결제 정보에 대한 IAM 사용자 및 역할 액세스 - 활성화   

기존 정책 직접 연결
권한 설정 - 실습이니까 AdministratorAccess

https://############.signin.aws.amazon.com/console

<vpc 생성>
VPC 등
IPv4 CIDR은 172.32.0.0/16
프라이빗 서브넷 수는 0으로 (이번 실습에는 필요 없어서)
VPC 엔드포인트 - 없음



<ec2 생성>
ec2 인스턴스 시작
test-example
ubuntu 18.04 lts
인스턴스 유형 - t3.medium
키 페어 생성 - 외부에서 ssh로 ec2 접속하기 위함

네트워크 설정
VPC 생성한 것 선택
서브넷은 끝에 a인 것 선택
퍼블릭 IP 자동 할당 - 활성화 (SSH 접속 시 필요)
보안 그룹 생성
보안 그룹 이름 - test-example-sg
설명 - example security group
ssh tcp 22
My IP - 현재 local PC IP
스토리지 - 30

<aws cli 설치>
cf> cmd에서 aws --version 확인 명령어
mv ~/Downloads/test-examaple.pem ./ (pem키 저장 위해 만든 디렉토리에서 실행)
chmod 400 test-example-mac.pem (644가 기본이라 다른 사용자 이용 못하게 바꿔줘야 사용해서 접속 가능함)
ssh -i "test-example-mac.pem" ubuntu@ec2-43-201-70-14.ap-northeast-2.compute.amazonaws.com
(윈도우에서는 cmd창을 관리자 권한으로 실행할 것)

OS 버전 확인 가능
cat /etc/lsb-release

커널 버전 등 확인
uname -a

<java 설치>
sudo apt update 사용할 수 있는 패키지 정보 업데이트
sudo apt install -y default-jdk
java -version

<docker 설치> - ubuntu
sudo apt update
sudo apt install docker.io
sudo systemctl status docker

ubuntu 계정에 docker 실행 권한을 주기위한 설정
sudo chmod 666 /var/run/docker.sock
(도커 컨테이너 내부에서 데몬과 상호 작용을 할 수 있게 해주는 Unix 소켓)

docker images
docker ps

<docker 설치> - centOS
sudo yum -y update
sudo yum -y upgrade
sudo yum -y install docker docker-registry

sudo systemctl start docker.service
sudo systemctl enable docker.service

docer version

github 가입
https://github.com

<VS Code 설치> - 통합 개발 도구 (local PC에)
https://code.visualstudio.com/download

소스에저 - 리포지토리 복제 - GitHub에서 복제 - 



02. [개정판] Gradle을 활용한 빌드 준비

Gradle
(Groovy - JVM 상에서 실행되는 스크립트 언어, 자바와 유사한 문법 구조에 호환성 좋음)
Gradle은 Groovy를 이용한 빌드 자동화 시스템이다. Groovy와 유사한 도메인 언어를 채용하였으며, 현재 안드로이드 앱을 만드는데 필요한 안드로이드 스튜디오의 공식 빌드 시스템이기도 하다. Java, C/C++, 파이썬 등과 같은 여러 가지 언어를 지원한다. (java 빌드는 주로 gradle사용함 - 이전에는 maven이라고 xml 기반으로 해서)
요즘은 Spring이 대세라, Gradle 많이 이용함

프로젝트를 설정 주입 방식으로 정의
멀티 프로젝트 빌드
빌드 속도가 빠름

초기화 단계: Gradle에 빌드할 프로젝트를 설정하고 생성
구성 단계: 프로젝트 객체가 구성함. 여기서는 빌드에 포함할 프로젝트의 빌드 스크립트 및 Task를 작성 (소스코드, 라이브러리, 의존성, 속성값 설정 등을 빌드 스크립트에 명시 - 처리해야 할 task 단위로 작성할 수 있음)
실행단계: Gradle의 모든 Task를 통합하고 빌드를 실행

src: source, 즉 코드 부분임 - main / test(단위 테스트 부분임, 테스트 코드)
build.gradle: 프로젝트 내 소스코드에 대한 빌드 방식, 라이브러리 의존성, 플러그인, 라이브러리 저장소 등을 설정할 수 있는 빌드 스크립팅 파일 (그럼 컴파일 필요 없음? build.gradle만? src는 컴파일?)
gradle 디렉토리: gradle-wrapper 관련 파일들이 존재. 이 파일들은 gradlew라는 랩퍼 파일을 실행시키기 위해 필요한 파일
gradlew: 리눅스 또는 맥os용 그래들 실행 쉘 스크립트 파일
gradlew.bat: 윈도우용 실행 배치 스크립트 파일
settings.gradle: 프로젝트의 구성 정보 파일

 
Jib
https://github.com/GoogleContainerTools/jib

Docker 데몬 없이, 그리고 Docker 권장사항에 대한 깊은 숙달 없이 Java 애플리케이션에 최적화된 Docker 및 OCI 이미지를 빌드합니다. Maven및 Gradle용 플러그인과 자바 라이브러리로 사용할 수 있습니다

특징 (vs docker로 build)
1. 빠른 Docker 이미지 빌드 및 배포가 가능
2. 애플리케이션을 여러 레이어로 분리하여 클래스 종속성을 분리해 변경된 레이어만 배포가 가능 (가벼운 상태의 컨테이너 이미지 배포 가능)
3. Docker 데몬이나 Docker CLI가 없어도 Gradle 내에서 Docker 이미지를 빌드하고 원하는 컨테이너 이미지 리포지토리로 이미지를 Push하는 명령어를 구성할 수 있음
(dockerfile도 필요 없고, docker daemon이 수행하는 build와 push과정을 한 번에 진행해 줌)

build.gradle에 jib 설정을 함
Jib 플러그인 부분 - plugins {}에 jib 설정함 (그러면 아래쪽에 jib에 대한 설정 할 수 있음)

Jib 설정 - jib {}
from
to - 베이스 이미지를 특정 repository로 저장
container - 특정 container에 대한 설정 진행도 가능 - dockerfile에 설정하는 속성값 등을)
extraDirectories - 빌드및 푸시가 되는 생성된 패키지는 extraDirectories에 저장됨 (아티팩트 - build/libs에 jar파일 생성됨)
(컨테이너를 만든다는 것은 애플리케이션을 배포할 패지키가 있다는 것 - gradle 형태로 build) 
jib이 이 경로에 있는 jar를 java를 통해 실행함


실습
1 Gradle 설정 실습
Gradle 설치 및 Gradle Project 생성 및 빌드

맥에 설치
brew install gradle
gradle -v

우분투에 설치
명령을 실행하여 Ubuntu 리눅스에 PPA 저장소를 추가
(PPA - Personal Package Archive 각각의 커뮤니티나 개인이 운영하면서 최신 혹은 새로운 프로그램을 관리하는 저장소 - Gradle 7 설치를 위함, 그냥 설치하면 4가 설치돼 실습에 지장이 있음)
sudo apt -y install vim apt-transport-https dirmngr wget software-properties-common
sudo add-apt-repository ppa:cwchien/gradle

Ubuntu 리눅스 패키지 업데이트 및 Gradle을 7이상 버전으로 설치
sudo apt-get update
sudo apt -y install gradle
gradle -v

Gradle 프로젝트 구성(생성) 명령어
gradle init --dsl=groovy --type=java-application --test-framework=junit --package=com.test --project-name=test-docker-spring-boot
(default: no인 상태 그대로 enter할 것)

(java application 코드가 해당 gradle project에 소스 코드로서 명시, 또 junit로 단위 테스트)
(init는 jave 프로젝트 생성하는 것임
dsl - build script를 어떤 언어로 작성할 건지 groovy
type - 프로젝트 type (실행가능한 java application)
package name 설정
project name 설정

ec2 vm에서 mkdir test-example 만들어 구성해도 좋음

sudo spt install tree
tree

cat settings.gradle
project name
include(‘app) - app 디렉토리에 있는 application project를 root project에 포함하겠다는 의미임

app/src (java 코드 기반)
src-main-java-com-test-App.java (자바로 작성된 앱이 있음 - hello world 출력하도록)

app/build.gradle (jave 코드를 빌드할 수 있는 스크립트)
repositories - artifact repository, 각종 라이브러리, 의종성을 가져와서 참고하게 만듦
dependencies - 명시돼 있는 라이브러리를 artifact repository에서 가지고 옴
application - com.test.App 즉 app.java가 mainclss임을 명시하고 있음 (java 폴더 뒤부터임 /java/com/test/App.java)

Gradle 빌드 명령어
gradle build --info
(--info 상세 빌드 정보 보여줌)

app/build/libs/app.jar 생성됨
(java로 바로 실행할 수도 있고, docker container로도 실행할 수도 있음
(jar=application임)

2 Docker 빌드 실습
https://hub.docker.com

test라는 이름의 레포지토리 생성
jib-test라는 이름의 레포지토리 생성 (밑의 jib 실습을 위해 미리 만드는 것임)

DockerHub에 대한 로그인 
(맥, 리눅스)
console(local)과 vm 둘 다에 로그인하기
sudo docker login

예제 실습코드 경로
Part2_Docker/Chapter2/0-docker/

Docker 빌드 및 Push 명령어
build
vsc의 dockerfile가서 우클릭 - Open in Integrated Terminal
pwd로 경로 확인해서 터미널(큰 화면때문)에 가기

./gradlew clean build
혹시 이전 빌드 내용 있을까봐 clean 해줌) 

/build/libs/test-docker-boot-spring-boot-0.0.1-SNAPSHOT.jar 파일 생성됨

docker for desktop 실행 후, dockerfile있는 경로로 이동 후
docker build -t likespike/test:1.0 ./

docker images

push
docker push likespike/test:1.0

pull
push 테스트니까 기존 이미지 삭제
docker rmi 이미지ID

docker pull likespike/test:1.0

run
docker run -d -p 8080:8080 <container id>
-d background실행
-p port연결
docker run -d -p 8080:8080 likespike/test:1.0
(-d: detach 백그라운드 실행)

docker ps

docker logs <container ID>

curl http://localhost:8080
웹브라우저에서 localhost:8080
(8080으로 Tomcat이 실행되면서 웹서버로 접속 가능한 상태됨)

여기까지가 기존 Docker의 라이프싸이클임


3 Jib 설정 실습
실습 위해 기본 docker image 삭제해 줄 것
docker ps
docker stop
docker ps -a
docker rm
(rm은 컨테이너, rmi 이미지)
docker images
docker rmi

Docker 데몬 off
mad에서는 Docker Desktop 종료
linux에서는 sudo systemctl stop docker (<-> start)

Part2_Docker/Chapter02/1-jib-docker/ 으로 이동

jib에 대한 build.gradle 설정
    image = '<Docker Hub Repository URL>'
    tags = ['<TAG Name>']

    image = ‘likespike/jib-test’
    tags = [‘1.0’]

jib.to.image 부분에 likespike/jib-test
jib.to.tag에 1.0

jvmFlags 부분은 이런 옵션도 넣을 수 있다는 것을 보여주기 위해 일부러 넣은 것임

./gradlew clean build --info

java 있으면 
java -jar build/libs/test-docker-spring-boot-0.0.1-SNAPSHOT.jar
이 자체로 실행할 수 있지만, 컨테이너 이미지로 만들 것임

Jib을 이용한 Docker 빌드 및 Push 명령어
./gradlew jib - 컨테이너 이미지 빌드(앞에서는 jar 생성)

docker hub에서 확인해 보기

jib에서 image 생성 및 push여서 local에 image가 남아 있지 않음(docker build와의 차이점)

Docker Image Pull 및 Run 명령어
docker pull likespike/jib-test:1.0

docker images

docker run -d -p 8080:8080 -t likespike/jib-test:1.0 이나
docker run -d -p 8080:8080 994d(이미지ID)

docker ps

docker logs -f <container id>

curl http://localhost:8080
curl http://localhost:8080 -v (상세옵션 HTTP/1.1 200 ok도 볼 수 있음)

이 수동 부분을 자동화하고 지속적인 빌드 및 배포할 수 있는 통합 빌드 도구인 Jenkins를 다음 시간부터 배워볼 것임




03. [개정판] Jenkins 소개와 설치

Jenkins는소프트웨어 개발 시 지속적 통합(Continous Integration)서비스를 제공하는 툴이다. 다수의 개발자들이 하나의 프로그램을 개발할 때 버전 충돌을 방지하기 위해 각자 작업한 내용을 공유 영역에 있는 Git 등의 저장소에 빈번히 업로드함으로써 지속적 통합이 가능하도록 해 준다.

jar설치도 가능하지만 container로 설치해서 실습할 것임

플러그인 설치 실습
* Jenkins DSL 플러그인 설치 
* Jenkins Pipeline 플러그인 설치 - pipeline으로 job task 연결?
* Github 플러그인 설치 
* Docker 플러그인 설치 
* AWS 플러그인 설치 
* SSH 플러그인 설치

인증 설정 실습
* SSH Key 생성 (로컬) 
* Github 인증 설정 (ssh-key) 
* AWS 인증 설정 (aws-key) 
* 배포 서버 인증 설정 (deploy-key)  
SSH Key 생성 (로컬)
mkdir -p ~/pems/jenkins
(-p parents 상위 경로도 함께 생성) 
cd ~/pems/jenkins

ssh-keygen -t ed25519 -a 100 -f ssh-key
(ed25519는 알고리즘임) - rsa와 무슨 차이?? CI/CD파이프라인 구성하는데 차이는 없는가?
private 키 (jenkins 인증 설정에 사용)
.pub 공개키 (github 인증 설정에 사용)

Gibhub내 Repository 연동
예제 실습 코드 fork한 곳에 가서
Settings - Security - Deploy Keys - Add deploy key
Allow write access에 체크



VPC 정보 (이 실습의 문맥에서)
test-vpc 172.31.0.0/16

서브넷 정보
test-public-subnet1 172.31.0.0/24 subnet-0b5db9bdaa4159edc
test-public-subnet2 172.31.1.0/24 subnet-03a3f6587310a4374

인터넷 게이트웨이 1 (인터넷 연결해야 하기 때문에)
test-igw (Attcahed)

라우팅 테이블 3개
삭제 불가능 1개
test-public-route1 - 서브넷1 연결
test-public-route2 - 서브넷2 연결
(그리고 각각 0.0.0.0/0 igw로 라우팅 연결 설정함)

NAT 게이트웨이 없음

네트워크 ACL 1 (이 실습건지는 모르겠음)
삭제 불가능 기본 1개

DHCP 옵션 세트 1 

EC2 생성
test-jenkins
Ubuntu 18.04 LST
t3.medium
키페어 test-jenkins
test-vpc
test-public-subnet1
퍼블릭 IP 자동 할당 - 활성화
보안 그룹 생성 - test-jenkins

보안 그룹 규칙 1 - SSH
소스 유형 - 내IP
설명 - SSH Connection

보안 그룹 규칙 2 - 사용자 지정 TCP
8080
소스유형 - 내 IP
설명 - Jenkins Web Console

스토리지는 default (8 gp2 ssd임)

pem키 이동
cd ../ec2vm
mv ~/Downloads/test-jenkins.pem ./

test-jenkins에 ssh 연결
chmod 400 test-jenkins.pem - 현재 계정에서 read(r)만 가능하게

docker 설치
sudo apt update
sudo apt install -y docker.io

우분투 계정으로도 docker 실행해야 함으로
sudo chmod 666 /var/run/docker.sock

docker images
sudo systemctl status docker

jenkins 사용 디렉토리 만들기
mkdir jenkins (host volume 경로 하나 만드는 것임)

설치
docker run --name jenkins -d -p 8080:8080 -v ~/jenkins:/var/jenkins_home -u root jenkins/jenkins:latest  -v mount volume 옵션임
-u user (여기서는 컨테이너를 root 계정으로 사용한다는 의미임)

docker ps
docker logs -f <container id>
(-f follow log output) - 여기서도 admin password 확인 가능함

Admin Password 확인 명령어
docker exec -it jenkins bash -c "cat /var/jenkins_home/secrets/initialAdminPassword" 
(-c은 context string 데몬에 연결하는데 사용할 context의 이름)
jenkins admin password
################################

웹브라우저에서 jenkins server 접속하기
보안그룹에서 8080 열렸나 확인

해당 인스턴스의 퍼블릭 IP 주소로 접속
(:8080 붙여야 함)
http://13.125.191.101:8080/

admin 계정 로그인 상태이기 때문에 
admin 권한 있는 test계정 하나 더 만들기

사람 - 설정 - Time Zone 설정
Asia/Seoul

Jenkins 관리 - 플러그인 관리
Available plugins에서
검색어
dsl
Job DSL

pipeline
Pipeline: Declarative Agent API
Pipeline Utility Steps
Build Pipeline

docker
Docker
Docker Commons
Docker Pipeline
Docker API
Docker-build-step

github
Github Intergration
Github Authentication
Pipelind: Github
Gradle Repo

aws
CloudBees AWS Credentials
Pipeline: AWS Steps
Amazon ECR
AWS Global Configuration

ssh - SSH / Publish Over SSH / SSH Pipeline Steps / SSH Agent

인증 설정 진행
jenkins 관리 - Manage Credentials - System - Global credentials - Add Credentials
3개 키 등록해야 함
jenkins - github
jenkins - aws ecr
jenkins - ec2 vm (deploy server)


jenkins - github 등록
kind: SSH Username with private key
id:ssh-key
description: ssh-key
username: ssh-key
Enter directly
ssh-key 입력(private key로, 확장자X)

Jenkins에서 Github Repositiry를 SSH URL로 연결시 문제 해결방법 #1
Jenkins 버전 업으로, Git Host Key Verification에 대해서 기본적으로 세팅 된 값 때문에 발생한 에러임

Git host Key Verification 설정 해제하면 됨 
Jenkins 관리 - Security - Configure Global Security
Git Host Key Verification Configuration을 No verification으로 함
에러 메시지 살아졌는지 확인


-----BEGIN OPENSSH PRIVATE KEY-----
ECAwQ=
-----END OPENSSH PRIVATE KEY-----


aws 등록
두 가지 방법이 있음
Add Credentials
kind: AWS Credentials

Jenkins 관리 - System Configuration - AWS
Seoul
Add - Jenkins
kind: AWS Credentials
name: aws-key
description: aws-key
입력
입력한 것 선택후 저장



04. [개정판] Jenkins를 활용한 Docker 빌드

Job Pipeline 및 Jenkinsfile 설정
Jenkins CI/CD Job 수행 및 Doscker 빌드/배포

Jenkinsfile을 통해 Jenkins Job을 구현하는 것임

docker build와 배포는 jib 이용할 것임

<CI Job Pipeline 및 Jenkinsfile 설정 실습>
Pipeline 기본 설정
Github 연동 확인
Jenkinsfile 기본 구조
Stage별 구성 확인 (Job이 수행되는 Stage별)
인증 설정 참조 방법

Part2_Docker/Chapter02/2-jenkins-docker 설명
settings.gradle
앱 디렉토리를 gradle project로 추가

build.gradle
jib에 to가 없는데, Jenkinsfile에서 task를 진행할 때, gradle, jib 명령을 통해 to를 설정하는 부분이 명시되어 있기 때문임

예전 gradle실습 때
application {
  //Define the main class for the apaplications.
  mainClass = ‘com.test.App’
}

예전 gradle-jib 실습 때
jib {
  container {
    entrypoint = ['java', '-Dspring.profiles.active=test', '-jar', 'test-docker-spring-boot-0.0.1-SNAPSHOT.jar']
  }
}

이번 실습에서는 jar파일이 아닌 mainClass를 명시함 - 뭐가 차이가 있나?
jib {
  container {
    mainClass = ‘com.test.StartApplication’
  }
}
(java 파일도 한 번 볼 것)

Jenkinsfile
pipeline - 각 stage가 있음 - task를 step별로 구현 가능

def 변수정의
mainDir = WorkDir
def ecrLoginHelper=“docker-credential-ecr-login”

둘이 한 쌍임
def ecrUrl=“AWS ECR URL>”
def repository=“test”

def deployHost=“<Deploy VM Private IP>”
(jenkins와 deploy가 같은 VPC내에 있기 떄문에 Private 통신이 가능함)

pipeline {
agent any
(따로 별도의 슬레이브로 run job을 실행하는 서버를 마련하지 않았다면, 현재의 jenkins server로 job을 진행할 수 있게) ??

checkout scm(source code managemenet하는게 GitHub)

stage - Build Docker Image by Jib & Push to AWS ECR Repository
jib 부분에 to있음(ecr로 push)

ecrLoginHelper가 이 stage에 있음
(jenkins plugin이나 미리 세팅 안되어 있다면 helper를 binary로 받아서 권한 주고 bin경로로 옮겨서 진행해야 함) - jenkinsfile내용을 직접 수행한다고 보면 됨


사전 준비
AWS ECR Repository
(Elastic Container Registry 만들기 - AWS ECR 생성)
프라이빗
test
Jib Push용
푸시 명령 보기에서 로그인 명령어 복사
Jenkinsfile에 def 설정해줄 것
############.dkr.ecr.ap-northeast-2.amazonaws.com
test
(aws ECR URL에 붙여 넣고 test는 아래 있으니까 지운다)


AWS EC2 VM - 컨테이너 배포 서버 (Deploy VM)
test-deploy
t3-micro
키 페어 - deploy 고유의 키 페어를 만들어야 하기에 새로 만든다
test-deploy
퍼블릭 IP 자동 할당
보안그룹 test-deploy
22(SSH)
Source type - Custom 172.31.0.0/16 (이 vpc의 ip 대역에서만 접근 가능하게, private ip 대역대로만 연결 가능하도록)
test-vpc SSH Connection

80(Web App)
HTTP
My IP (local에서 접근할 것인기 때문에)
Web Application

그럼 local에서는 deploy에 접근 못하함 (SSH만? docker은 됨?)
jenkins vm 통해서 접근할 것
mkdir pems
cd pems
vi test-deploy.pem
복사

chmod 400 test-deploy.pem

ssh -i test-deploy.pem ubuntu@<private ip>

docker 설치
sudo apt update
sudo apt install -y docker.io

sudo chmod 666 /var/run/docker.sock

docker version

java설치는 필요없지만 필요하다면 설치 가능
sudo apt install -y default-jdk
java -version

awscli 설치 및 설정
AWS ECR 접근을 위한 환경 설정 방법  - 배포 서버에서 ECR에 접근할 수 있어야 함
sudo apt install -y aws-cli
aws configure
region: ap-northeast-2
format: json

ls -al
cd .aws
ls
cat credentials - access key와 secret access key 정보
cat config - region과 format 정보

AWS ECR에 정상적으로 로그인 되는지 확인 - deploy vm
console - ecr - test - push명령 보기
AWS CLI 사용 명령어 복사

aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ############.dkr.ecr.ap-northeast-2.amazonaws.com

Login Succeeded

jenkins-deploy server 간 연결 등록
웹브라우저로 jenkins 접속
Jenkins 관리 - Managed Credentials - Add Credentials
SSH Username with private key
deploy-key
deploy-key
deploy-key
붙여넣기

vcs 에 <Deploy VM Private IP> 넣기
172.32.19.22

def mainDir="Chapter02/2-jenkins-docker"
def ecrLoginHelper="docker-credential-ecr-login"
def region="ap-northeast-2"
def ecrUrl="############.dkr.ecr.ap-northeast-2.amazonaws.com"
def repository="test"
def deployHost="172.32.19.22"

git으로 commit
이렇게 local setting이 끝나면 끝난게 아니라 jenkins에 설정된 전역변수를 참조해서 값들을 넣어줘야 함
vcs-source control - test라는 메시지로 commit하기

Code - SSH 복사
git@github.com:likespike/FastCampus.git

jenkins 웹브라우저
새로운 아이템 - Pipeline
test-pipeline (이름)
Build Triggers - 수동으로 할 것이기 때문에 아무 것도 체크 X
Pipeline-Definition
Pipeline script from SCM 선택

SCM - git 선택

credentials - ssh-key 선택

Brach to build - Branch Specifier
main

Script Path
jenkinsfile - def mainDir 부분 복사-붙여넣기 + /Jenkinsfile

Chapter02/2-jenkins-docker/Jenkinsfile


Job 해보기
Dashboard - test-pipeline - 지금 빌드 클릭
번호 클릭 - console output보면 절차 보임

jenkins server -> deploy server 가서

docker images
docker ps
docker logs <container id>
Tomcat이 8080으로 시작됨

curl http://localhost:80

웹브라우저에서 deploy server 확인
public ip로 접속하기
http://ec2-13-125-240-59.ap-northeast-2.compute.amazonaws.com
